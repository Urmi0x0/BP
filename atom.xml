<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://urmi0x0.github.io/BP</id>
    <title>Urmi</title>
    <subtitle>Blog</subtitle>
    <icon>https://urmi0x0.github.io/BP/images/favicon.ico</icon>
    <link href="https://urmi0x0.github.io/BP" />
    <author>
      <name>Urmi</name>
    </author>
    <updated>2022-10-06T10:49:35.333Z</updated>
    <entry>
        <id>https://urmi0x0.github.io/BP/2022/10/06/study-notes/c-sharp/csharp-002/</id>
        <title>使用SerialPort设置串口属性</title>
        <link rel="alternate" href="https://urmi0x0.github.io/BP/2022/10/06/study-notes/c-sharp/csharp-002/"/>
        <content type="html">&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;本文仅用于记录本人学习中所遇到的问题和知识加以记录总结，不保证所记录的是最优解，仅作为抛砖引玉，如有不足和纰漏欢迎指正。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;本文所涉及软件资源均来源网络，如有侵权请联系站主。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;从  &lt;code&gt;.NET Framework 2.0&lt;/code&gt;  开始，微软就默认提供了  &lt;code&gt;System.IO.Ports.SerialPort&lt;/code&gt;  类，根据 &lt;code&gt;SerialPort&lt;/code&gt;  类提供的简单操作步骤，可以很容易的完成串口的信息收发程序，从特定的串口中接收到数据也可以进行数据的发送。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9hcGkvc3lzdGVtLmlvLnBvcnRzLnNlcmlhbHBvcnQ/dmlldz1kb3RuZXQtcGxhdC1leHQtNi4w&#34;&gt;SerialPort&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;设置串口属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置串口属性&#34;&gt;#&lt;/a&gt; 设置串口属性&lt;/h1&gt;
&lt;p&gt;关于 &lt;code&gt;SerialPort&lt;/code&gt;  类的应用也很容易，可以根据微软官方的介绍进行使用，以下介绍一些必须初始化设置的内容。&lt;/p&gt;
&lt;h2 id=&#34;serialport-串口属性赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serialport-串口属性赋值&#34;&gt;#&lt;/a&gt;  &lt;code&gt;SerialPort&lt;/code&gt;  串口属性赋值&lt;/h2&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;figcaption data-lang=&#34;C#&#34;&gt;&lt;span&gt;p 串口初始化&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;IO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;SerialPort&lt;/span&gt; sp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token constructor-invocation class-name&#34;&gt;SerialPort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PortName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;COM4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;BaudRate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9600&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataBits &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Parity &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Parity&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;StopBits &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; StopBits&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;One&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReceivedBytesThreshold &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataReceived &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token constructor-invocation class-name&#34;&gt;SerialDataReceivedEventHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Serial_Received&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;关于SerialPort各个结点函数的解释&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code&gt;SerialPort()&lt;/code&gt; : 初始化 &lt;code&gt;SerialPort&lt;/code&gt;  类的新实例。&lt;br /&gt;
 &lt;code&gt;PortName&lt;/code&gt; : 获取设置通信端口，包括但不限于所有可用的 &lt;code&gt;COM&lt;/code&gt;  端口。&lt;br /&gt;
 &lt;code&gt;BaudRate&lt;/code&gt; : 获取或设置串行波特率。波特率数值越大，代表其传输速率越快。但是波特率并不是越高越好，一般情况下，波特率越高，其传播距离越短。对于使用何种波特率需要结合实际项目来分析选择。&lt;br /&gt;
 &lt;code&gt;DataBits&lt;/code&gt; ：获取或设置每个字节的标准数据位长度。一般来说，数据位越小，代表传播频率越高，传播内容更多。一般情况下我们选择 &lt;code&gt;8&lt;/code&gt;  位。 &lt;code&gt;ASCII&lt;/code&gt;  协议下可以选择 &lt;code&gt;7&lt;/code&gt;  位。&lt;br /&gt;
 &lt;code&gt;Parity&lt;/code&gt; ：获取或设置奇偶校验检查协议。奇偶校验用于确认数据传输的准确性。本次选择了在 &lt;code&gt;Modbus&lt;/code&gt;  协议中的 &lt;code&gt;CRC校验&lt;/code&gt; ，所以选择关闭奇偶校验。&lt;br /&gt;
 &lt;code&gt;StopBits&lt;/code&gt; : 获取或设置每个字节的标准停止位数。&lt;br /&gt;
 &lt;code&gt;ReceivedBytesThreshold&lt;/code&gt; : 获取或设置 &lt;code&gt;DataReceived&lt;/code&gt;  事件发生前内部输入缓冲区中的字节数。&lt;br /&gt;
 &lt;code&gt;DataReceived&lt;/code&gt; : 指示已通过由 &lt;code&gt;SerialPort&lt;/code&gt;  对象表示的端口接收了数据。&lt;br /&gt;
 &lt;code&gt;Open()&lt;/code&gt; : 打开一个新的串行端口连接。&lt;br /&gt;
 &lt;code&gt;Close()&lt;/code&gt; ：关闭端口连接，将 &lt;code&gt;IsOpen&lt;/code&gt;  属性设置为 &lt;code&gt;false&lt;/code&gt; ，并释放内部 &lt;code&gt;Stream&lt;/code&gt;  对象。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;每个串口只能打开一次，若要再次调用串口时需要关闭已经打开的串口。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;其中，如果想要简化串口赋值的步骤，可以通过以下构造函数来初始化。&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;figcaption data-lang=&#34;C#&#34;&gt;&lt;span&gt;简化写法&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;SerialPort&lt;/span&gt; sp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token constructor-invocation class-name&#34;&gt;SerialPort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Int32&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Parity&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Int32&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; StopBits&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用指定的端口名、波特率、奇偶校验位、数据位和停止位初始化 SerialPort 类的新实例。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;检查串口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查串口&#34;&gt;#&lt;/a&gt; 检查串口&lt;/h1&gt;
&lt;p&gt;在程序开始运行前，我们需要判断串口是否可以使用或是否被占用，以此我们可以使用以下代码。&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;figcaption data-lang=&#34;C#&#34;&gt;&lt;span&gt;判断串口&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token return-type class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;IsPortOpen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;string&lt;/span&gt;&lt;/span&gt; armport&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt;&lt;/span&gt; _open &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt;&lt;/span&gt; _availavle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;SerialPort&lt;/span&gt; _tempPort&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt; Portname &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; SerialPort&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;GetPortNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 获取所有已经打开的串口名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 遍历所有已经打开的串口名称，并给出反馈是我们所期望的串口是否已经打开&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt; ipn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; ipn &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; Portname&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; ipn&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Portname&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ipn&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; armport &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      _open &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 判断串口状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_open&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      _tempPort &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token constructor-invocation class-name&#34;&gt;SerialPort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      _tempPort&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PortName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; armport&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      _tempPort&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_tempPort&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;IsOpen&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _tempPort&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _availavle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      _availavle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    _availavle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 返回 bool 变量，是否可以使用该串口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; _availavle&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;创建串口接收事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建串口接收事件&#34;&gt;#&lt;/a&gt; 创建串口接收事件&lt;/h1&gt;
&lt;p&gt;在上文中我并未对 &lt;code&gt;Serial_Received&lt;/code&gt;  函数进行解释。因为这是用户自定义的函数接收事件。代码如下&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;figcaption data-lang=&#34;C#&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token return-type class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Serial_Received&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;object&lt;/span&gt;&lt;/span&gt; sender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SerialDataReceivedEventArgs&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;BytesToRead &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    recrep &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; sp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ReadByte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;X2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ToUpper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;           &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 数据读取，直到读完缓冲区数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="学习笔记" scheme="https://urmi0x0.github.io/BP/categories/study-notes/" />
        <category term="C#" scheme="https://urmi0x0.github.io/BP/categories/study-notes/c-sharp/" />
        <updated>2022-10-06T10:49:35.333Z</updated>
    </entry>
    <entry>
        <id>https://urmi0x0.github.io/BP/2022/10/05/study-notes/c-sharp/csharp-001/</id>
        <title>ModbusRTU仿真环境搭建</title>
        <link rel="alternate" href="https://urmi0x0.github.io/BP/2022/10/05/study-notes/c-sharp/csharp-001/"/>
        <content type="html">&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;本文仅用于记录本人学习中所遇到的问题和知识加以记录总结，不保证所记录的是最优解，仅作为抛砖引玉，如有不足和纰漏欢迎指正。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;本文所涉及软件资源均来源网络，如有侵权请联系站主。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ModbusRTU&lt;/code&gt;  是公开的 Modbus 通讯协议中的⼀种，⼀般以串⼝作为通讯介质来传输标准格式的报⽂，实现主从站之间的数据交互，⼴泛应⽤于⼯业设备的通信中。&lt;br /&gt;
 &lt;code&gt;ModbusRTU&lt;/code&gt;  是⼀种⼀对多的通信协议，所有的数据读写请求由主站发送，指定的从站接收到正确的报⽂后，则会被动响应主站的请求，返回对应的响应报⽂。&lt;/p&gt;
&lt;h1 id=&#34;仿真环境搭建所需软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#仿真环境搭建所需软件&#34;&gt;#&lt;/a&gt; 仿真环境搭建所需软件&lt;/h1&gt;
&lt;p&gt;搭建 Modbus 仿真环境需要以下软件：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubW9kYnVzdG9vbHMuY29tL21vZGJ1c19wb2xsLmh0bWw=&#34;&gt;Modbus Poll&lt;/span&gt; 是一款非常受欢迎的 Modbus 主站设备仿真器，可用于测试和调试 Modbus 从站设备。该软件支持 Modbus RTU、ASCII、TCP/IP 等协议模式。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubW9kYnVzdG9vbHMuY29tL21vZGJ1c19zbGF2ZS5odG1s&#34;&gt;Modbus Slave&lt;/span&gt; Modbus 从设备仿真器，可以仿真 32 个从设备 / 地址域。每个接口都提供了对 EXCEL 报表的 OLE 自动化支持。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZWx0aW1hLmNvbS9jbi9wcm9kdWN0cy92c3BkeHAv&#34;&gt;Virtual Serial Port Driver&lt;/span&gt; 可以在一个电脑上虚拟出两个 com 端口，并透过虚拟调制解调器电缆成对连接。双方的应用程序将能够以这种方式交换数据，所有写入第一个端口的数据将显示在第二个端口一次又一次。&lt;/p&gt;
&lt;p&gt;下载链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU5pYlBSV3JzREVDUHM5YjBRWDlRbHc/cHdkPWF1czg=&#34;&gt;百度网盘&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;仿真软件安装步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#仿真软件安装步骤&#34;&gt;#&lt;/a&gt; 仿真软件安装步骤&lt;/h1&gt;
&lt;p class=&#34;primary&#34;&gt;解压&lt;span class=&#34;blue&#34;&gt; Modbus 调试工具软件套装.rar&lt;/span&gt;，其中包括了：&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; &lt;span class=&#34;blue&#34;&gt;Modbus Poll 9.2.2 Build 1343.zip&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_1&#34;&gt; &lt;span class=&#34;blue&#34;&gt;Modbus Slave 7.3.0.1402 x64.zip&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_2&#34;&gt; &lt;span class=&#34;blue&#34;&gt;虚拟串口 vspd7.2.308.zip&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_3&#34;&gt; &lt;span class=&#34;blue&#34;&gt;虚拟串口 vspdp9.0 破解版.zip&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modbus-poll-安装步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modbus-poll-安装步骤&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Modbus Poll&lt;/code&gt;  安装步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解压&lt;span class=&#34;blue&#34;&gt; Modbus Poll 9.2.2 Build 1343.zip&lt;/span&gt;，根据系统选择对应的安装包，运行主程序，并根据安装向导提示安装好软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件安装成功后，在桌面运行打开软件，进入主界面点击&lt;span class=&#34;green&#34;&gt; Connection&lt;/span&gt;，选择&lt;span class=&#34;green&#34;&gt; Connect...&lt;/span&gt;，弹出软件注册界面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaFNOUlJ1LXJ0SThrVWs1P2U9U0h6OGRU.jpg&#34; alt=&#34;&#34; title=&#34;软件注册界面&#34; height=&#34;295px&#34; width=&#34;350px&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;打开安装包中的&lt;span class=&#34;blue&#34;&gt; key.text&lt;/span&gt; 文件，将文本内注册码复制到软件注册界面需要填写注册码方框中，然后点击&lt;span class=&#34;green&#34;&gt; OK&lt;/span&gt; 即可激活软件。&lt;br /&gt;
&lt;span class=&#34;pink&#34;&gt;key:&lt;/span&gt; &lt;span class=&#34;spoiler&#34; title=&#34;你知道得太多了&#34;&gt;5A5742575C5D391A17627B6C010350&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaEhLQ3VtZFdWMEstcExHP2U9azJGWmhj.jpg&#34; alt=&#34;&#34; title=&#34;软件注册界面&#34; height=&#34;295px&#34; width=&#34;350px&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;modbus-slave-安装步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modbus-slave-安装步骤&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Modbus Slave&lt;/code&gt;  安装步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解压&lt;span class=&#34;blue&#34;&gt; Modbus Slave 7.3.0.1402 x64.zip&lt;/span&gt;，运行主程序，并根据安装向导提示安装好软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件安装成功后，在桌面运行打开软件，进入主界面点击&lt;span class=&#34;green&#34;&gt; Connection&lt;/span&gt;，选择&lt;span class=&#34;green&#34;&gt; Connect...&lt;/span&gt;，弹出软件注册界面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaE9HekVfZGtQYkljSmluP2U9N0tKZkxv.jpg&#34; alt=&#34;&#34; title=&#34;软件注册界面&#34; height=&#34;295px&#34; width=&#34;302px&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;打开安装包中的&lt;span class=&#34;blue&#34;&gt; key.text&lt;/span&gt; 文件，将文本内注册码复制到软件注册界面需要填写注册码方框中，然后点击&lt;span class=&#34;green&#34;&gt; OK&lt;/span&gt; 即可激活软件。&lt;br /&gt;
&lt;span class=&#34;pink&#34;&gt;key:&lt;/span&gt; &lt;span class=&#34;spoiler&#34; title=&#34;你知道得太多了&#34;&gt;54554154514756666A655A187D545E505C454F&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaExMTXMzTzdzZmFtTFRrP2U9ekJTWDBn.jpg&#34; alt=&#34;&#34; title=&#34;软件注册界面&#34; height=&#34;295px&#34; width=&#34;302px&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;virtual-serial-port-driver-安装步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#virtual-serial-port-driver-安装步骤&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Virtual Serial Port Driver&lt;/code&gt;  安装步骤&lt;/h2&gt;
&lt;p&gt;本安装包中提供了&lt;span class=&#34;blue&#34;&gt; vspd7.2&lt;/span&gt; 和&lt;span class=&#34;blue&#34;&gt; vspd9.0&lt;/span&gt; 两个版本，本文以&lt;span class=&#34;blue&#34;&gt; vspd9.0&lt;/span&gt; 版本为例子举例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解压&lt;span class=&#34;blue&#34;&gt;虚拟串口 vspdp9.0 破解版.zip&lt;/span&gt;，运行主程序&lt;span class=&#34;blue&#34;&gt; vspdpro 原版.exe&lt;/span&gt;，并根据安装向导提示安装好软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开文件安装目录，将文件目录中的&lt;span class=&#34;blue&#34;&gt; vspdpro.exe&lt;/span&gt; 替换成安装文件包中的&lt;span class=&#34;blue&#34;&gt; vspdpro.exe&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="学习笔记" scheme="https://urmi0x0.github.io/BP/categories/study-notes/" />
        <category term="C#" scheme="https://urmi0x0.github.io/BP/categories/study-notes/c-sharp/" />
        <updated>2022-10-05T13:05:11.935Z</updated>
    </entry>
    <entry>
        <id>https://urmi0x0.github.io/BP/2022/10/05/guide/text/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="https://urmi0x0.github.io/BP/2022/10/05/guide/text/hello-world/"/>
        <content type="html">&lt;hr /&gt;
&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="指北" scheme="https://urmi0x0.github.io/BP/categories/guide/" />
        <category term="测试" scheme="https://urmi0x0.github.io/BP/categories/guide/text/" />
        <updated>2022-10-05T13:04:42.443Z</updated>
    </entry>
</feed>
