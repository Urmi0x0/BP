{
    "version": "https://jsonfeed.org/version/1",
    "title": "Urmi",
    "subtitle": "Blog",
    "icon": "https://urmi0x0.github.io/BP/images/favicon.ico",
    "description": "Ahhhhhh",
    "home_page_url": "https://urmi0x0.github.io/BP",
    "items": [
        {
            "id": "https://urmi0x0.github.io/BP/2022/10/06/study-notes/c-sharp/csharp-002/",
            "url": "https://urmi0x0.github.io/BP/2022/10/06/study-notes/c-sharp/csharp-002/",
            "title": "使用SerialPort设置串口属性",
            "date_published": "2022-10-06T10:49:35.333Z",
            "content_html": "<div class=\"note info\">\n<p>本文仅用于记录本人学习中所遇到的问题和知识加以记录总结，不保证所记录的是最优解，仅作为抛砖引玉，如有不足和纰漏欢迎指正。</p>\n</div>\n<div class=\"note info\">\n<p>本文所涉及软件资源均来源网络，如有侵权请联系站主。</p>\n</div>\n<p>从  <code>.NET Framework 2.0</code>  开始，微软就默认提供了  <code>System.IO.Ports.SerialPort</code>  类，根据 <code>SerialPort</code>  类提供的简单操作步骤，可以很容易的完成串口的信息收发程序，从特定的串口中接收到数据也可以进行数据的发送。</p>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9hcGkvc3lzdGVtLmlvLnBvcnRzLnNlcmlhbHBvcnQ/dmlldz1kb3RuZXQtcGxhdC1leHQtNi4w\">SerialPort</span></p>\n<h1 id=\"设置串口属性\"><a class=\"anchor\" href=\"#设置串口属性\">#</a> 设置串口属性</h1>\n<p>关于 <code>SerialPort</code>  类的应用也很容易，可以根据微软官方的介绍进行使用，以下介绍一些必须初始化设置的内容。</p>\n<h2 id=\"serialport-串口属性赋值\"><a class=\"anchor\" href=\"#serialport-串口属性赋值\">#</a>  <code>SerialPort</code>  串口属性赋值</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>p 串口初始化</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>Ports</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">SerialPort</span> sp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerialPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sp<span class=\"token punctuation\">.</span>PortName <span class=\"token operator\">=</span> <span class=\"token string\">\"COM4\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sp<span class=\"token punctuation\">.</span>BaudRate <span class=\"token operator\">=</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sp<span class=\"token punctuation\">.</span>DataBits <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sp<span class=\"token punctuation\">.</span>Parity <span class=\"token operator\">=</span> Parity<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sp<span class=\"token punctuation\">.</span>StopBits <span class=\"token operator\">=</span> StopBits<span class=\"token punctuation\">.</span>One<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sp<span class=\"token punctuation\">.</span>ReceivedBytesThreshold <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sp<span class=\"token punctuation\">.</span>DataReceived <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerialDataReceivedEventHandler</span><span class=\"token punctuation\">(</span>Serial_Received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sp<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><details class=\"info\"><summary>关于SerialPort各个结点函数的解释</summary><div>\n<p><code>SerialPort()</code> : 初始化 <code>SerialPort</code>  类的新实例。<br />\n <code>PortName</code> : 获取设置通信端口，包括但不限于所有可用的 <code>COM</code>  端口。<br />\n <code>BaudRate</code> : 获取或设置串行波特率。波特率数值越大，代表其传输速率越快。但是波特率并不是越高越好，一般情况下，波特率越高，其传播距离越短。对于使用何种波特率需要结合实际项目来分析选择。<br />\n <code>DataBits</code> ：获取或设置每个字节的标准数据位长度。一般来说，数据位越小，代表传播频率越高，传播内容更多。一般情况下我们选择 <code>8</code>  位。 <code>ASCII</code>  协议下可以选择 <code>7</code>  位。<br />\n <code>Parity</code> ：获取或设置奇偶校验检查协议。奇偶校验用于确认数据传输的准确性。本次选择了在 <code>Modbus</code>  协议中的 <code>CRC校验</code> ，所以选择关闭奇偶校验。<br />\n <code>StopBits</code> : 获取或设置每个字节的标准停止位数。<br />\n <code>ReceivedBytesThreshold</code> : 获取或设置 <code>DataReceived</code>  事件发生前内部输入缓冲区中的字节数。<br />\n <code>DataReceived</code> : 指示已通过由 <code>SerialPort</code>  对象表示的端口接收了数据。<br />\n <code>Open()</code> : 打开一个新的串行端口连接。<br />\n <code>Close()</code> ：关闭端口连接，将 <code>IsOpen</code>  属性设置为 <code>false</code> ，并释放内部 <code>Stream</code>  对象。</p>\n<div class=\"note info\">\n<p>每个串口只能打开一次，若要再次调用串口时需要关闭已经打开的串口。</p>\n</div>\n</div></details>\n<p>其中，如果想要简化串口赋值的步骤，可以通过以下构造函数来初始化。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>简化写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SerialPort</span> sp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerialPort</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> Int32<span class=\"token punctuation\">,</span> Parity<span class=\"token punctuation\">,</span> Int32<span class=\"token punctuation\">,</span> StopBits<span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用指定的端口名、波特率、奇偶校验位、数据位和停止位初始化 SerialPort 类的新实例。</span></pre></td></tr></table></figure><h1 id=\"检查串口\"><a class=\"anchor\" href=\"#检查串口\">#</a> 检查串口</h1>\n<p>在程序开始运行前，我们需要判断串口是否可以使用或是否被占用，以此我们可以使用以下代码。</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"><span>判断串口</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsPortOpen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> armport<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> _open <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> _availavle <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token class-name\">SerialPort</span> _tempPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Portname <span class=\"token operator\">=</span> SerialPort<span class=\"token punctuation\">.</span><span class=\"token function\">GetPortNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 获取所有已经打开的串口名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 遍历所有已经打开的串口名称，并给出反馈是我们所期望的串口是否已经打开</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ipn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ipn <span class=\"token operator\">&lt;</span> Portname<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> ipn<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Portname<span class=\"token punctuation\">[</span>ipn<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> armport <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      _open <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 判断串口状态</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_open<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      _tempPort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SerialPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      _tempPort<span class=\"token punctuation\">.</span>PortName <span class=\"token operator\">=</span> armport<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      _tempPort<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_tempPort<span class=\"token punctuation\">.</span>IsOpen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        _tempPort<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        _availavle <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      _availavle <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    _availavle <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">// 返回 bool 变量，是否可以使用该串口</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">return</span> _availavle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"创建串口接收事件\"><a class=\"anchor\" href=\"#创建串口接收事件\">#</a> 创建串口接收事件</h1>\n<p>在上文中我并未对 <code>Serial_Received</code>  函数进行解释。因为这是用户自定义的函数接收事件。代码如下</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Serial_Received</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerialDataReceivedEventArgs</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">.</span>BytesToRead <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    recrep <span class=\"token operator\">+=</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">ReadByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>           </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 数据读取，直到读完缓冲区数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习笔记",
                "C#"
            ]
        },
        {
            "id": "https://urmi0x0.github.io/BP/2022/10/05/study-notes/c-sharp/csharp-001/",
            "url": "https://urmi0x0.github.io/BP/2022/10/05/study-notes/c-sharp/csharp-001/",
            "title": "ModbusRTU仿真环境搭建",
            "date_published": "2022-10-05T13:05:11.935Z",
            "content_html": "<div class=\"note info\">\n<p>本文仅用于记录本人学习中所遇到的问题和知识加以记录总结，不保证所记录的是最优解，仅作为抛砖引玉，如有不足和纰漏欢迎指正。</p>\n</div>\n<div class=\"note info\">\n<p>本文所涉及软件资源均来源网络，如有侵权请联系站主。</p>\n</div>\n<p><code>ModbusRTU</code>  是公开的 Modbus 通讯协议中的⼀种，⼀般以串⼝作为通讯介质来传输标准格式的报⽂，实现主从站之间的数据交互，⼴泛应⽤于⼯业设备的通信中。<br />\n <code>ModbusRTU</code>  是⼀种⼀对多的通信协议，所有的数据读写请求由主站发送，指定的从站接收到正确的报⽂后，则会被动响应主站的请求，返回对应的响应报⽂。</p>\n<h1 id=\"仿真环境搭建所需软件\"><a class=\"anchor\" href=\"#仿真环境搭建所需软件\">#</a> 仿真环境搭建所需软件</h1>\n<p>搭建 Modbus 仿真环境需要以下软件：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9kYnVzdG9vbHMuY29tL21vZGJ1c19wb2xsLmh0bWw=\">Modbus Poll</span> 是一款非常受欢迎的 Modbus 主站设备仿真器，可用于测试和调试 Modbus 从站设备。该软件支持 Modbus RTU、ASCII、TCP/IP 等协议模式。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9kYnVzdG9vbHMuY29tL21vZGJ1c19zbGF2ZS5odG1s\">Modbus Slave</span> Modbus 从设备仿真器，可以仿真 32 个从设备 / 地址域。每个接口都提供了对 EXCEL 报表的 OLE 自动化支持。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWx0aW1hLmNvbS9jbi9wcm9kdWN0cy92c3BkeHAv\">Virtual Serial Port Driver</span> 可以在一个电脑上虚拟出两个 com 端口，并透过虚拟调制解调器电缆成对连接。双方的应用程序将能够以这种方式交换数据，所有写入第一个端口的数据将显示在第二个端口一次又一次。</p>\n<p>下载链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU5pYlBSV3JzREVDUHM5YjBRWDlRbHc/cHdkPWF1czg=\">百度网盘</span></p>\n<h1 id=\"仿真软件安装步骤\"><a class=\"anchor\" href=\"#仿真软件安装步骤\">#</a> 仿真软件安装步骤</h1>\n<p class=\"primary\">解压<span class=\"blue\"> Modbus 调试工具软件套装.rar</span>，其中包括了：</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> <span class=\"blue\">Modbus Poll 9.2.2 Build 1343.zip</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> <span class=\"blue\">Modbus Slave 7.3.0.1402 x64.zip</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> <span class=\"blue\">虚拟串口 vspd7.2.308.zip</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> <span class=\"blue\">虚拟串口 vspdp9.0 破解版.zip</span></label></li>\n</ul>\n<h2 id=\"modbus-poll-安装步骤\"><a class=\"anchor\" href=\"#modbus-poll-安装步骤\">#</a>  <code>Modbus Poll</code>  安装步骤</h2>\n<ol>\n<li>\n<p>解压<span class=\"blue\"> Modbus Poll 9.2.2 Build 1343.zip</span>，根据系统选择对应的安装包，运行主程序，并根据安装向导提示安装好软件。</p>\n</li>\n<li>\n<p>软件安装成功后，在桌面运行打开软件，进入主界面点击<span class=\"green\"> Connection</span>，选择<span class=\"green\"> Connect...</span>，弹出软件注册界面。</p>\n</li>\n</ol>\n<p><img data-src=\"https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaFNOUlJ1LXJ0SThrVWs1P2U9U0h6OGRU.jpg\" alt=\"\" title=\"软件注册界面\" height=\"295px\" width=\"350px\" /></p>\n<ol start=\"3\">\n<li>打开安装包中的<span class=\"blue\"> key.text</span> 文件，将文本内注册码复制到软件注册界面需要填写注册码方框中，然后点击<span class=\"green\"> OK</span> 即可激活软件。<br />\n<span class=\"pink\">key:</span> <span class=\"spoiler\" title=\"你知道得太多了\">5A5742575C5D391A17627B6C010350</span></li>\n</ol>\n<p><img data-src=\"https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaEhLQ3VtZFdWMEstcExHP2U9azJGWmhj.jpg\" alt=\"\" title=\"软件注册界面\" height=\"295px\" width=\"350px\" /></p>\n<h2 id=\"modbus-slave-安装步骤\"><a class=\"anchor\" href=\"#modbus-slave-安装步骤\">#</a>  <code>Modbus Slave</code>  安装步骤</h2>\n<ol>\n<li>\n<p>解压<span class=\"blue\"> Modbus Slave 7.3.0.1402 x64.zip</span>，运行主程序，并根据安装向导提示安装好软件。</p>\n</li>\n<li>\n<p>软件安装成功后，在桌面运行打开软件，进入主界面点击<span class=\"green\"> Connection</span>，选择<span class=\"green\"> Connect...</span>，弹出软件注册界面。</p>\n</li>\n</ol>\n<p><img data-src=\"https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaE9HekVfZGtQYkljSmluP2U9N0tKZkxv.jpg\" alt=\"\" title=\"软件注册界面\" height=\"295px\" width=\"302px\" /></p>\n<ol start=\"3\">\n<li>打开安装包中的<span class=\"blue\"> key.text</span> 文件，将文本内注册码复制到软件注册界面需要填写注册码方框中，然后点击<span class=\"green\"> OK</span> 即可激活软件。<br />\n<span class=\"pink\">key:</span> <span class=\"spoiler\" title=\"你知道得太多了\">54554154514756666A655A187D545E505C454F</span></li>\n</ol>\n<p><img data-src=\"https://link.jscdn.cn/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcWVCVDVpaHBLTGxuaExMTXMzTzdzZmFtTFRrP2U9ekJTWDBn.jpg\" alt=\"\" title=\"软件注册界面\" height=\"295px\" width=\"302px\" /></p>\n<h2 id=\"virtual-serial-port-driver-安装步骤\"><a class=\"anchor\" href=\"#virtual-serial-port-driver-安装步骤\">#</a>  <code>Virtual Serial Port Driver</code>  安装步骤</h2>\n<p>本安装包中提供了<span class=\"blue\"> vspd7.2</span> 和<span class=\"blue\"> vspd9.0</span> 两个版本，本文以<span class=\"blue\"> vspd9.0</span> 版本为例子举例。</p>\n<ol>\n<li>\n<p>解压<span class=\"blue\">虚拟串口 vspdp9.0 破解版.zip</span>，运行主程序<span class=\"blue\"> vspdpro 原版.exe</span>，并根据安装向导提示安装好软件。</p>\n</li>\n<li>\n<p>打开文件安装目录，将文件目录中的<span class=\"blue\"> vspdpro.exe</span> 替换成安装文件包中的<span class=\"blue\"> vspdpro.exe</span>。</p>\n</li>\n</ol>\n",
            "tags": [
                "学习笔记",
                "C#"
            ]
        },
        {
            "id": "https://urmi0x0.github.io/BP/2022/10/05/guide/text/hello-world/",
            "url": "https://urmi0x0.github.io/BP/2022/10/05/guide/text/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-05T13:04:42.443Z",
            "content_html": "<hr />\n<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "指北",
                "测试"
            ]
        }
    ]
}